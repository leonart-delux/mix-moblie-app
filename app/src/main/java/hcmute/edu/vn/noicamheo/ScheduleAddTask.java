package hcmute.edu.vn.noicamheo;

import android.annotation.TargetApi;
import android.app.AlarmManager;
import android.app.DatePickerDialog;
import android.app.PendingIntent;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import hcmute.edu.vn.noicamheo.broadcastReceiver.AlarmBroadcastReceiver;
import hcmute.edu.vn.noicamheo.database.DatabaseHelper;
import hcmute.edu.vn.noicamheo.entity.Task;


public class ScheduleAddTask extends AppCompatActivity {

    private EditText addTaskTitle, addTaskDescription, addTaskDate, addTaskTime;
    private Button buttonAdd;
    private DatabaseHelper databaseHelper;
    private int taskId = -1; // ID task, n·∫øu -1 t·ª©c l√† ƒëang th√™m m·ªõi

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_task);

        // √Ånh x·∫° c√°c view
        addTaskTitle = findViewById(R.id.addTaskTitle);
        addTaskDescription = findViewById(R.id.addTaskDescription);
        addTaskDate = findViewById(R.id.addTaskDate);
        addTaskTime = findViewById(R.id.addTaskTime);
        buttonAdd = findViewById(R.id.buttonadd);

        databaseHelper = new DatabaseHelper(this);

        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu t·ª´ Edit Task kh√¥ng
        Intent intent = getIntent();
        if (intent.hasExtra("taskId")) {
            taskId = intent.getIntExtra("taskId", -1);
            loadTaskData(taskId); // Load d·ªØ li·ªáu c≈©
            buttonAdd.setText("Update Task"); // ƒê·ªïi t√™n n√∫t
        }

        // Ch·ªçn ng√†y
        addTaskDate.setOnClickListener(v -> showDatePicker());

        // Ch·ªçn gi·ªù
        addTaskTime.setOnClickListener(v -> showTimePicker());

        // X·ª≠ l√Ω khi b·∫•m ADD TASK (ho·∫∑c Update Task n·∫øu ƒëang ch·ªânh s·ª≠a)
        buttonAdd.setOnClickListener(v -> saveTaskToDatabase());
    }

    private void showDatePicker() {
        Calendar myCalendar = Calendar.getInstance();
        new DatePickerDialog(this, (view, year, month, dayOfMonth) -> {
            myCalendar.set(year, month, dayOfMonth);

            // ƒê·ªãnh d·∫°ng l·∫°i ng√†y ƒë·ªÉ lo·∫°i b·ªè d·∫•u ","
            String dayOfWeek = new SimpleDateFormat("EEE", Locale.US).format(myCalendar.getTime()); // "Fri"
            String day = new SimpleDateFormat("dd", Locale.US).format(myCalendar.getTime()); // "22"
            String monthName = new SimpleDateFormat("MMM", Locale.US).format(myCalendar.getTime()); // "Mar"

            String formattedDate = dayOfWeek + " " + day + " " + monthName;  // "Fri 22 Mar"
            addTaskDate.setText(formattedDate);
        }, myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH), myCalendar.get(Calendar.DAY_OF_MONTH)).show();
    }


    private void showTimePicker() {
        Calendar myCalendar = Calendar.getInstance();
        new TimePickerDialog(this, (view, hourOfDay, minute) -> {
            myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
            myCalendar.set(Calendar.MINUTE, minute);
            String timeFormat = new SimpleDateFormat("HH:mm", Locale.US).format(myCalendar.getTime());
            addTaskTime.setText(timeFormat);
        }, myCalendar.get(Calendar.HOUR_OF_DAY), myCalendar.get(Calendar.MINUTE), true).show();
    }

    private void loadTaskData(int taskId) {
        Task task = databaseHelper.getTaskById(taskId);
        if (task != null) {
            addTaskTitle.setText(task.getTitle());
            addTaskDescription.setText(task.getDescription());
            addTaskDate.setText(task.getDate());
            addTaskTime.setText(task.getTime());
        }
    }

    private void saveTaskToDatabase() {
        String title = addTaskTitle.getText().toString().trim();
        String description = addTaskDescription.getText().toString().trim();
        String date = addTaskDate.getText().toString().trim();
        String time = addTaskTime.getText().toString().trim();

        // Ki·ªÉm tra n·∫øu c√≥ tr∆∞·ªùng n√†o b·ªã b·ªè tr·ªëng
        if (title.isEmpty() || description.isEmpty() || date.isEmpty() || time.isEmpty()) {
            Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", Toast.LENGTH_SHORT).show();
            return;
        }

        // L·∫•y nƒÉm hi·ªán t·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o nƒÉm ƒë∆∞·ª£c hi·ªÉu ƒë√∫ng
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        String fullDateTime = date + " " + currentYear + " " + time; // VD: "Mon 25 Mar 2024 14:30"

        // Chuy·ªÉn ƒë·ªïi ng√†y gi·ªù t·ª´ chu·ªói sang ƒë·ªëi t∆∞·ª£ng Date
        SimpleDateFormat sdf = new SimpleDateFormat("EEE dd MMM yyyy HH:mm", Locale.US);
        Calendar selectedDate = Calendar.getInstance();

        try {
            Date parsedDate = sdf.parse(fullDateTime);
            if (parsedDate != null) {
                selectedDate.setTime(parsedDate);
            } else {
                Toast.makeText(this, "L·ªói chuy·ªÉn ƒë·ªïi ng√†y/gi·ªù!", Toast.LENGTH_SHORT).show();
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "ƒê·ªãnh d·∫°ng ng√†y/gi·ªù kh√¥ng h·ª£p l·ªá!", Toast.LENGTH_SHORT).show();
            return;
        }

        // Ki·ªÉm tra xem ng√†y ƒë√£ ch·ªçn c√≥ n·∫±m trong qu√° kh·ª© kh√¥ng
        if (isDateInPast(date, time, selectedDate)) {
            Toast.makeText(this, "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch trong qu√° kh·ª©!", Toast.LENGTH_SHORT).show();
            return;
        }

        // Ti·∫øn h√†nh th√™m/c·∫≠p nh·∫≠t Task trong database
        Task task;
        if (taskId == -1) {
            // Tr∆∞·ªùng h·ª£p th√™m m·ªõi task
            task = new Task(0, title, description, date, time);
            long newTaskId = databaseHelper.addTask(task);
            if (newTaskId == -1) {
                Toast.makeText(this, "L·ªói khi th√™m Task!", Toast.LENGTH_SHORT).show();
                return;
            }
            setOrScheduleAlarm(newTaskId, title, description, date, time, selectedDate.getTimeInMillis());
            Toast.makeText(this, "Task ƒë√£ ƒë∆∞·ª£c th√™m!", Toast.LENGTH_SHORT).show();
        } else {
            // Tr∆∞·ªùng h·ª£p c·∫≠p nh·∫≠t task
            task = new Task(taskId, title, description, date, time);
            databaseHelper.updateTask(task);
            setOrScheduleAlarm(taskId, title, description, date, time, selectedDate.getTimeInMillis());
            Toast.makeText(this, "Task ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", Toast.LENGTH_SHORT).show();
        }

        // K·∫øt th√∫c Activity sau khi l∆∞u
        finish();
    }



    private boolean isDateInPast(String date, String time, Calendar selectedDate) {
        Calendar today = Calendar.getInstance();
        today.set(Calendar.HOUR_OF_DAY, 0);
        today.set(Calendar.MINUTE, 0);
        today.set(Calendar.SECOND, 0);
        today.set(Calendar.MILLISECOND, 0);

        if (selectedDate.before(today)) {
            return true; // Ng√†y trong qu√° kh·ª©
        }
        return false;
    }


    private void setOrScheduleAlarm(long taskId, String title, String description, String date, String time, Long timeInMillis) {
        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        Intent intent = new Intent(this, AlarmBroadcastReceiver.class);
        intent.putExtra("taskId", taskId);
        intent.putExtra("title", title);
        intent.putExtra("description", description);

        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        String fullDate = date + " " + currentYear;
        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("EEE dd MMM yyyy HH:mm", Locale.US);

        try {
            Date parsedDate = sdf.parse(fullDate + " " + time);
            if (parsedDate != null) {
                calendar.setTime(parsedDate);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "L·ªói ƒë·ªãnh d·∫°ng ng√†y/gi·ªù", Toast.LENGTH_SHORT).show();
            return;
        }

        timeInMillis = calendar.getTimeInMillis();

        if (isDateInPast(date, time, calendar)) {
            Toast.makeText(this, "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch trong qu√° kh·ª©!", Toast.LENGTH_SHORT).show();
            return;
        }

        intent.putExtra("time", timeInMillis);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(
                this, (int) taskId, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && !alarmManager.canScheduleExactAlarms()) {
            Toast.makeText(this, "·ª®ng d·ª•ng ch∆∞a c√≥ quy·ªÅn ƒë·∫∑t b√°o th·ª©c!", Toast.LENGTH_LONG).show();
            requestExactAlarmPermission();
            return;
        }

        SimpleDateFormat logSdf = new SimpleDateFormat("HH:mm dd/MM/yyyy", Locale.US);
        Toast.makeText(this, "Task c·∫ßn l√†m v√†o l√∫c: " + logSdf.format(new Date(timeInMillis)), Toast.LENGTH_SHORT).show();

        if (alarmManager != null) {
            alarmManager.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent);
        }
    }







    /**
     * üïí ƒê·∫∑t b√°o th·ª©c ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o khi ƒë·∫øn gi·ªù task
     */


    @TargetApi(Build.VERSION_CODES.S)
    private void requestExactAlarmPermission() {
        Intent intent = new Intent(Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM);
        intent.setData(Uri.parse("package:" + getPackageName()));
        startActivity(intent);
    }




}
